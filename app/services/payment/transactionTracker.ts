import { PaymentService } from './paymentService';
import { BlockchainService } from '../blockchain/blockchainService';
import { NetworkType, USDTPaymentRequest } from '../../types/usdtPayment';
import { PAYMENT_CONSTANTS } from '../../config/blockchain';

export class TransactionTracker {
  private paymentService: PaymentService;
  private blockchainService: BlockchainService;
  private isRunning: boolean = false;
  private checkInterval: NodeJS.Timeout | null = null;
  private lastCheckedBlocks: Map<NetworkType, number>;

  constructor(paymentService: PaymentService, blockchainService: BlockchainService) {
    this.paymentService = paymentService;
    this.blockchainService = blockchainService;
    this.lastCheckedBlocks = new Map();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  start(): void {
    if (this.isRunning) {
      console.log('Transaction tracker is already running');
      return;
    }

    this.isRunning = true;
    console.log('Starting transaction tracker...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
    this.initializeLastCheckedBlocks();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    this.checkInterval = setInterval(() => {
      this.checkNewTransactions();
    }, PAYMENT_CONSTANTS.CHECK_INTERVAL);

    console.log('Transaction tracker started successfully');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  stop(): void {
    if (!this.isRunning) {
      console.log('Transaction tracker is not running');
      return;
    }

    this.isRunning = false;
    
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }

    console.log('Transaction tracker stopped');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
   */
  private async initializeLastCheckedBlocks(): Promise<void> {
    const networks = this.blockchainService.getSupportedNetworks();
    
    for (const network of networks) {
      try {
        const currentBlock = await this.blockchainService.getCurrentBlockNumber(network);
        this.lastCheckedBlocks.set(network, currentBlock);
        console.log(`Initialized ${network} last checked block: ${currentBlock}`);
      } catch (error) {
        console.error(`Error initializing last checked block for ${network}:`, error);
        this.lastCheckedBlocks.set(network, 0);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
   */
  private async checkNewTransactions(): Promise<void> {
    const networks = this.blockchainService.getSupportedNetworks();
    
    for (const network of networks) {
      try {
        await this.checkNetworkTransactions(network);
      } catch (error) {
        console.error(`Error checking transactions for ${network}:`, error);
      }
    }

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    this.paymentService.cleanupExpiredPayments();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
   */
  private async checkNetworkTransactions(network: NetworkType): Promise<void> {
    const lastCheckedBlock = this.lastCheckedBlocks.get(network) || 0;
    const currentBlock = await this.blockchainService.getCurrentBlockNumber(network);
    
    if (currentBlock <= lastCheckedBlock) {
      return; // –ù–µ—Ç –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    }

    console.log(`Checking ${network} transactions from block ${lastCheckedBlock + 1} to ${currentBlock}`);

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —ç—Ç–æ–π —Å–µ—Ç–∏
    const walletAddress = this.blockchainService.getWalletAddress(network);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactions = await this.blockchainService.getUSDTTokenTransfers(
      walletAddress,
      network,
      50 // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    );

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const newTransactions = transactions.filter(tx => 
      tx.blockNumber > lastCheckedBlock && 
      tx.status === 'success'
    );

    console.log(`üîç Found ${newTransactions.length} new transactions for ${network}`);

    // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Ç–∏
    const pendingPayments = this.getPendingPaymentsForNetwork(network);
    console.log(`üìã Found ${pendingPayments.length} pending payments for ${network}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    for (const transaction of newTransactions) {
      await this.processNewTransaction(transaction, network);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–ª–æ–∫
    this.lastCheckedBlocks.set(network, currentBlock);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
   */
  private async processNewTransaction(transaction: any, network: NetworkType): Promise<void> {
    try {
      console.log(`üîÑ Processing transaction ${transaction.hash} on ${network}`);

      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const pendingPayments = this.getPendingPaymentsForNetwork(network);
      
      if (pendingPayments.length === 0) {
        console.log(`   ‚ö†Ô∏è No pending payments found for ${network}`);
        return;
      }
      
      for (const payment of pendingPayments) {
        const amount = parseFloat(transaction.value) / Math.pow(10, this.getDecimals(network));
        const tolerance = 0.01;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å—É–º–º–∞
        if (Math.abs(amount - payment.expectedAmount) <= tolerance) {
          console.log(`Found matching payment ${payment.id} for transaction ${transaction.hash}`);

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
          const validation = await this.blockchainService.validatePayment(
            transaction.hash,
            payment.expectedAmount,
            payment.walletAddress,
            network
          );

          if (validation.isValid) {
            // –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            this.paymentService.updatePaymentStatus(payment.id, 'confirmed', {
              transactionHash: transaction.hash,
              confirmations: validation.confirmations,
              processedAt: new Date(),
              blockNumber: transaction.blockNumber
            });

            console.log(`Payment ${payment.id} confirmed with ${validation.confirmations} confirmations`);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
            await this.onPaymentConfirmed(payment, validation);
          } else if (validation.confirmations && validation.confirmations > 0) {
            // –ï—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            this.paymentService.updatePaymentStatus(payment.id, 'processing', {
              transactionHash: transaction.hash,
              confirmations: validation.confirmations,
              blockNumber: transaction.blockNumber
            });

            console.log(`Payment ${payment.id} processing with ${validation.confirmations} confirmations`);
          }
        }
      }
    } catch (error) {
      console.error(`Error processing transaction ${transaction.hash}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
   */
  private getPendingPaymentsForNetwork(network: NetworkType): USDTPaymentRequest[] {
    return this.paymentService.getPendingPaymentsForNetwork(network);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
   */
  private async onPaymentConfirmed(payment: USDTPaymentRequest, validation: any): Promise<void> {
    try {
      console.log(`Payment ${payment.id} confirmed with ${validation.confirmations} confirmations`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
      this.paymentService.updatePaymentStatus(payment.id, 'completed', {
        confirmedAt: new Date(),
        finalConfirmations: validation.confirmations
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
      const success = await this.paymentService.processConfirmedPayment(payment.id);
      
      if (success) {
        console.log(`‚úÖ Payment ${payment.id} automatically processed and balance credited`);
      } else {
        console.error(`‚ùå Failed to automatically process payment ${payment.id}`);
      }

    } catch (error) {
      console.error(`Error processing confirmed payment ${payment.id}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å–µ—Ç–∏
   */
  private getDecimals(network: NetworkType): number {
    const config = this.blockchainService.getNetworkConfig(network);
    return config.decimals;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
   */
  async forceCheck(): Promise<void> {
    console.log('Force checking all pending payments...');
    await this.paymentService.checkPendingPayments();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
   */
  async processConfirmedPayments(): Promise<number> {
    console.log('Processing all confirmed payments...');
    return await this.paymentService.processAllConfirmedPayments();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
   */
  getStatus(): { isRunning: boolean; lastCheckedBlocks: Record<string, number> } {
    const lastCheckedBlocks: Record<string, number> = {};
    
    for (const [network, block] of this.lastCheckedBlocks.entries()) {
      lastCheckedBlocks[network] = block;
    }

    return {
      isRunning: this.isRunning,
      lastCheckedBlocks
    };
  }
} 