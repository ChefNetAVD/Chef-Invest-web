import { userService } from '../services/auth/userService';
import { 
  createEmailVerificationToken,
  createPasswordResetToken,
  isValidToken,
  isTokenExpired,
  generateEmailVerificationCode,
  generatePasswordResetToken
} from './email';
import { AUTH_ERRORS } from '../types/auth';

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
 */
export class EmailSystemTester {
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç email —Å–∏—Å—Ç–µ–º—ã
   */
  async runEmailTests(): Promise<void> {
    console.log('üìß Starting Email System Tests...\n');

    try {
      // –¢–µ—Å—Ç 1: Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
      await this.testEmailVerification();
      
      // –¢–µ—Å—Ç 2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
      await this.testPasswordReset();
      
      // –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
      await this.testTokenValidation();
      
      // –¢–µ—Å—Ç 4: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ cooldown
      await this.testRateLimiting();

      console.log('‚úÖ All email system tests passed successfully!');
      
    } catch (error) {
      console.error('‚ùå Email system test failed:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private async testEmailVerification(): Promise<void> {
    console.log('üìß Testing email verification...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await userService.registerUser({
      email: 'test-verify@example.com',
      username: 'testverify',
      password: 'TestPass123!',
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é email
    const verificationToken = await userService.requestEmailVerification('test-verify@example.com');
    
    if (!verificationToken || !verificationToken.token) {
      throw new Error('Email verification token generation failed');
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    const success = await userService.confirmEmailVerification(verificationToken.token);
    
    if (!success) {
      throw new Error('Email verification confirmation failed');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    const user = userService.getUserByEmail('test-verify@example.com');
    if (!user || !user.isEmailVerified) {
      throw new Error('User email verification status not updated');
    }

    console.log('‚úÖ Email verification test passed');
  }

  /**
   * –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
   */
  private async testPasswordReset(): Promise<void> {
    console.log('üîë Testing password reset...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await userService.registerUser({
      email: 'test-reset@example.com',
      username: 'testreset',
      password: 'TestPass123!',
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    const resetToken = await userService.requestPasswordReset('test-reset@example.com');
    
    if (!resetToken || !resetToken.token) {
      throw new Error('Password reset token generation failed');
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    const success = await userService.confirmPasswordReset(resetToken.token, 'NewPass123!');
    
    if (!success) {
      throw new Error('Password reset confirmation failed');
    }

    console.log('‚úÖ Password reset test passed');
  }

  /**
   * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
   */
  private async testTokenValidation(): Promise<void> {
    console.log('üé´ Testing token validation...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const emailToken = createEmailVerificationToken('test-user', 'test@example.com');
    const passwordToken = createPasswordResetToken('test-user', 'test@example.com');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    if (!isValidToken(emailToken)) {
      throw new Error('Email verification token should be valid');
    }

    if (!isValidToken(passwordToken)) {
      throw new Error('Password reset token should be valid');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –Ω–µ –∏—Å—Ç–µ–∫–ª–∏
    if (isTokenExpired(emailToken)) {
      throw new Error('Email verification token should not be expired');
    }

    if (isTokenExpired(passwordToken)) {
      throw new Error('Password reset token should not be expired');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–æ–≤
    const emailCode = generateEmailVerificationCode();
    const passwordTokenValue = generatePasswordResetToken();

    if (emailCode.length !== 6) {
      throw new Error('Email verification code should be 6 digits');
    }

    if (passwordTokenValue.length !== 32) {
      throw new Error('Password reset token should be 32 characters');
    }

    console.log('‚úÖ Token validation test passed');
  }

  /**
   * –¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ cooldown
   */
  private async testRateLimiting(): Promise<void> {
    console.log('‚è±Ô∏è Testing rate limiting...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await userService.registerUser({
      email: 'test-rate@example.com',
      username: 'testrate',
      password: 'TestPass123!',
    });

    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
    try {
      await userService.requestEmailVerification('test-rate@example.com');
    } catch (error) {
      throw new Error('First email verification request should succeed');
    }

    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω cooldown
    try {
      await userService.requestEmailVerification('test-rate@example.com');
      throw new Error('Second email verification request should be blocked by cooldown');
    } catch (error) {
      if (error instanceof Error && error.message.includes('cooldown')) {
        // –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
      } else {
        throw error;
      }
    }

    console.log('‚úÖ Rate limiting test passed');
  }

  /**
   * –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
   */
  async testTokenStats(): Promise<void> {
    console.log('üìä Testing token statistics...');

    const tokenStats = userService.getTokenStats();
    
    if (typeof tokenStats.emailVerificationTokens !== 'number') {
      throw new Error('Token statistics should include email verification count');
    }

    if (typeof tokenStats.passwordResetTokens !== 'number') {
      throw new Error('Token statistics should include password reset count');
    }

    console.log('Token Statistics:', tokenStats);
    console.log('‚úÖ Token statistics test passed');
  }

  /**
   * –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
   */
  async testTokenCleanup(): Promise<void> {
    console.log('üßπ Testing token cleanup...');

    // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω
    const expiredToken = createEmailVerificationToken('test-user', 'test@example.com');
    expiredToken.expiresAt = new Date(Date.now() - 1000); // –ò—Å—Ç–µ–∫ 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞–∑–∞–¥

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ)
    userService['emailVerificationTokens'].set(expiredToken.id, expiredToken);

    const beforeCleanup = userService.getTokenStats().emailVerificationTokens;

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã
    userService.cleanupExpiredTokens();

    const afterCleanup = userService.getTokenStats().emailVerificationTokens;

    if (afterCleanup >= beforeCleanup) {
      throw new Error('Expired tokens should be cleaned up');
    }

    console.log('‚úÖ Token cleanup test passed');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ email —Å–∏—Å—Ç–µ–º—ã
 */
export async function runEmailSystemTests(): Promise<void> {
  const tester = new EmailSystemTester();
  
  await tester.runEmailTests();
  await tester.testTokenStats();
  await tester.testTokenCleanup();
  
  console.log('\nüéâ All email system tests completed successfully!');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default EmailSystemTester;
