import { userService } from '../services/auth/userService';
import { generateAccessToken, verifyAccessToken, hashPassword, verifyPassword } from './auth';
import { RegisterCredentials, LoginCredentials } from '../types/auth';

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export class AuthSystemTester {
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async runAuthTests(): Promise<void> {
    console.log('üîê Starting Authentication System Tests...\n');

    try {
      // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.testUserRegistration();
      
      // –¢–µ—Å—Ç 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.testUserAuthentication();
      
      // –¢–µ—Å—Ç 3: JWT —Ç–æ–∫–µ–Ω—ã
      await this.testJWTTokens();
      
      // –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      await this.testDataValidation();
      
      // –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
      await this.testTradingSystemIntegration();

      console.log('‚úÖ All authentication tests passed successfully!');
      
    } catch (error) {
      console.error('‚ùå Authentication test failed:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async testUserRegistration(): Promise<void> {
    console.log('üë§ Testing user registration...');

    const credentials: RegisterCredentials = {
      email: 'test@example.com',
      username: 'testuser',
      password: 'TestPass123!',
      firstName: 'Test',
      lastName: 'User',
    };

    const user = await userService.registerUser(credentials);
    
    if (!user || user.email !== credentials.email) {
      throw new Error('User registration failed');
    }

    console.log('‚úÖ User registration test passed');
  }

  /**
   * –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async testUserAuthentication(): Promise<void> {
    console.log('üîë Testing user authentication...');

    const credentials: LoginCredentials = {
      email: 'test@example.com',
      password: 'password123', // –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    };

    const user = await userService.authenticateUser(credentials);
    
    if (!user || user.email !== credentials.email) {
      throw new Error('User authentication failed');
    }

    console.log('‚úÖ User authentication test passed');
  }

  /**
   * –¢–µ—Å—Ç JWT —Ç–æ–∫–µ–Ω–æ–≤
   */
  private async testJWTTokens(): Promise<void> {
    console.log('üé´ Testing JWT tokens...');

    const testUser = {
      id: 'test_user_123',
      email: 'test@example.com',
      username: 'testuser',
      role: 'user' as const,
      isEmailVerified: false,
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const token = generateAccessToken(testUser);
    
    if (!token) {
      throw new Error('Token generation failed');
    }

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const payload = verifyAccessToken(token);
    
    if (!payload || payload.userId !== testUser.id) {
      throw new Error('Token verification failed');
    }

    console.log('‚úÖ JWT tokens test passed');
  }

  /**
   * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  private async testDataValidation(): Promise<void> {
    console.log('‚úÖ Testing data validation...');

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
    const validEmail = 'test@example.com';
    const invalidEmail = 'invalid-email';
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
    const validPassword = 'ValidPass123!';
    const invalidPassword = 'weak';
    
    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username
    const validUsername = 'validuser123';
    const invalidUsername = 'ab'; // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π

    console.log('‚úÖ Data validation test passed');
  }

  /**
   * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
   */
  private async testTradingSystemIntegration(): Promise<void> {
    console.log('üíº Testing trading system integration...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    const user = userService.getUserByEmail('test@example.com');
    
    if (!user) {
      throw new Error('User not found for trading system integration');
    }

    console.log('‚úÖ Trading system integration test passed');
  }

  /**
   * –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async testUserStats(): Promise<void> {
    console.log('üìä Testing user statistics...');

    const stats = userService.getUserStats();
    
    if (!stats || stats.total === 0) {
      throw new Error('User statistics test failed');
    }

    console.log('User Statistics:', {
      total: stats.total,
      active: stats.active,
      verified: stats.verified,
      byRole: stats.byRole,
    });

    console.log('‚úÖ User statistics test passed');
  }

  /**
   * –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
   */
  async testUserManagement(): Promise<void> {
    console.log('üë• Testing user management...');

    const user = userService.getUserByEmail('test@example.com');
    
    if (!user) {
      throw new Error('User not found for management test');
    }

    // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    const updatedProfile = await userService.updateUserProfile(user.id, {
      firstName: 'Updated',
      lastName: 'Name',
    });

    if (!updatedProfile || updatedProfile.firstName !== 'Updated') {
      throw new Error('Profile update test failed');
    }

    // –¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deactivated = userService.setUserActive(user.id, false);
    
    if (!deactivated) {
      throw new Error('User deactivation test failed');
    }

    // –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activated = userService.setUserActive(user.id, true);
    
    if (!activated) {
      throw new Error('User activation test failed');
    }

    console.log('‚úÖ User management test passed');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export async function runAuthSystemTests(): Promise<void> {
  const tester = new AuthSystemTester();
  
  await tester.runAuthTests();
  await tester.testUserStats();
  await tester.testUserManagement();
  
  console.log('\nüéâ All authentication system tests completed successfully!');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default AuthSystemTester;
