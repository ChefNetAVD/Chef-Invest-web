import { TradingSystem } from './tradingSystem';
import { 
  generateReferralLink, 
  extractReferrerId, 
  validateReferrerId,
  processReferralRegistration,
  getReferralStats,
  getReferralList,
  isActivePartner
} from './referral';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export class ReferralSystemTester {
  private tradingSystem: TradingSystem;

  constructor() {
    this.tradingSystem = new TradingSystem();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async runReferralTest(): Promise<void> {
    console.log('üéØ Starting Referral System Test...\n');

    try {
      // –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
      await this.testReferralLinkGeneration();
      
      // –¢–µ—Å—Ç 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ URL
      await this.testReferrerExtraction();
      
      // –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö ID
      await this.testReferrerValidation();
      
      // –¢–µ—Å—Ç 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
      await this.testReferralRegistration();
      
      // –¢–µ—Å—Ç 5: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      await this.testReferralStats();
      
      // –¢–µ—Å—Ç 6: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      await this.testFullReferralCycle();

      console.log('‚úÖ All referral system tests passed successfully!');
      
    } catch (error) {
      console.error('‚ùå Referral system test failed:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
   */
  private async testReferralLinkGeneration(): Promise<void> {
    console.log('üîó Testing referral link generation...');

    const testUserId = 'test-user-123';
    const referralLink = generateReferralLink(testUserId);
    
    console.log(`  - User ID: ${testUserId}`);
    console.log(`  - Generated link: ${referralLink}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
    if (!referralLink.includes('ref=')) {
      throw new Error('Referral link does not contain ref parameter');
    }

    if (!referralLink.includes(testUserId)) {
      throw new Error('Referral link does not contain user ID');
    }

    console.log('‚úÖ Referral link generation test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ URL
   */
  private async testReferrerExtraction(): Promise<void> {
    console.log('üîç Testing referrer extraction from URL...');

    const testUrl = 'https://chef-invest.com/register?ref=referrer-456&other=param';
    const extractedId = extractReferrerId(testUrl);
    
    console.log(`  - Test URL: ${testUrl}`);
    console.log(`  - Extracted ID: ${extractedId}`);

    if (extractedId !== 'referrer-456') {
      throw new Error(`Expected referrer ID 'referrer-456', got '${extractedId}'`);
    }

    // –¢–µ—Å—Ç —Å URL –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const noRefUrl = 'https://chef-invest.com/register?other=param';
    const noRefId = extractReferrerId(noRefUrl);
    
    if (noRefId !== null) {
      throw new Error(`Expected null for URL without ref, got '${noRefId}'`);
    }

    console.log('‚úÖ Referrer extraction test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö ID
   */
  private async testReferrerValidation(): Promise<void> {
    console.log('‚úÖ Testing referrer validation...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const referrerId = 'valid-referrer-789';
    this.tradingSystem.initializeUser(referrerId);

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const isValid = validateReferrerId(referrerId, this.tradingSystem);
    console.log(`  - Valid referrer ${referrerId}: ${isValid}`);

    if (!isValid) {
      throw new Error(`Valid referrer ${referrerId} was marked as invalid`);
    }

    // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const invalidId = 'invalid-referrer-999';
    const isInvalid = validateReferrerId(invalidId, this.tradingSystem);
    console.log(`  - Invalid referrer ${invalidId}: ${isInvalid}`);

    if (isInvalid) {
      throw new Error(`Invalid referrer ${invalidId} was marked as valid`);
    }

    console.log('‚úÖ Referrer validation test passed\n');
  }

  /**
   * –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
   */
  private async testReferralRegistration(): Promise<void> {
    console.log('üë• Testing referral registration...');

    const referrerId = 'referrer-reg-123';
    const newUserId = 'new-user-reg-456';

    // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    this.tradingSystem.initializeUser(referrerId);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
    const success = processReferralRegistration(newUserId, referrerId, this.tradingSystem);
    console.log(`  - Registration success: ${success}`);

    if (!success) {
      throw new Error('Referral registration failed');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
    const newUserBalance = this.tradingSystem.getUserBalance(newUserId);
    if (!newUserBalance) {
      throw new Error('New user was not created');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω
    const referrerNetwork = this.tradingSystem.getPartnerNetwork(referrerId);
    if (!referrerNetwork) {
      throw new Error('Referrer network not found');
    }

    console.log(`  - Referrer total referrals: ${referrerNetwork.totalReferrals}`);
    console.log(`  - Referrer level1 partners: ${referrerNetwork.level1Partners.length}`);

    if (referrerNetwork.totalReferrals !== 1) {
      throw new Error(`Expected 1 referral, got ${referrerNetwork.totalReferrals}`);
    }

    if (!referrerNetwork.level1Partners.includes(newUserId)) {
      throw new Error('New user not found in referrer level1 partners');
    }

    console.log('‚úÖ Referral registration test passed\n');
  }

  /**
   * –¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private async testReferralStats(): Promise<void> {
    console.log('üìä Testing referral statistics...');

    const referrerId = 'stats-referrer-123';
    const partnerId = 'stats-partner-456';

    // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    this.tradingSystem.initializeUser(referrerId);
    processReferralRegistration(partnerId, referrerId, this.tradingSystem);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∞–∫—Ü–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º (–¥–ª—è –∫–æ–º–∏—Å—Å–∏–π)
    this.tradingSystem.buyShares(partnerId, 1000, 0.10); // $100 –ø–æ–∫—É–ø–∫–∞

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const stats = getReferralStats(referrerId, this.tradingSystem);
    console.log(`  - Referrer stats:`, stats);

    if (!stats) {
      throw new Error('Referral stats not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (stats.totalReferrals !== 1) {
      throw new Error(`Expected 1 referral, got ${stats.totalReferrals}`);
    }

    if (stats.totalPartners !== 1) {
      throw new Error(`Expected 1 partner, got ${stats.totalPartners}`);
    }

    if (stats.totalEarnings < 10) { // 10% –æ—Ç $100 = $10
      throw new Error(`Expected earnings >= $10, got $${stats.totalEarnings}`);
    }

    if (!stats.referralLink.includes(referrerId)) {
      throw new Error('Referral link does not contain referrer ID');
    }

    console.log('‚úÖ Referral statistics test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
   */
  private async testFullReferralCycle(): Promise<void> {
    console.log('üîÑ Testing full referral cycle...');

    // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const referrerId = 'cycle-referrer-123';
    this.tradingSystem.initializeUser(referrerId);
    console.log(`  - Created referrer: ${referrerId}`);

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const referralLink = generateReferralLink(referrerId);
    console.log(`  - Generated link: ${referralLink}`);

    // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
    const extractedId = extractReferrerId(referralLink);
    console.log(`  - Extracted ID: ${extractedId}`);

    if (extractedId !== referrerId) {
      throw new Error(`Extracted ID mismatch: expected ${referrerId}, got ${extractedId}`);
    }

    // 4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const isValid = validateReferrerId(extractedId, this.tradingSystem);
    console.log(`  - Validated referrer: ${isValid}`);

    if (!isValid) {
      throw new Error('Referrer validation failed');
    }

    // 5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const partnerId = 'cycle-partner-456';
    const success = processReferralRegistration(partnerId, referrerId, this.tradingSystem);
    console.log(`  - Partner registration: ${success}`);

    if (!success) {
      throw new Error('Partner registration failed');
    }

    // 6. –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–∫—É–ø–∞–µ—Ç –∞–∫—Ü–∏–∏
    this.tradingSystem.buyShares(partnerId, 500, 0.10); // $50 –ø–æ–∫—É–ø–∫–∞
    console.log(`  - Partner bought shares for $50`);

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const referrerBalance = this.tradingSystem.getUserBalance(referrerId);
    const referrerStats = getReferralStats(referrerId, this.tradingSystem);
    
    console.log(`  - Referrer balance: $${referrerBalance?.usdBalance}`);
    console.log(`  - Referrer earnings: $${referrerStats?.totalEarnings}`);

    if (referrerStats?.totalEarnings < 5) { // 10% –æ—Ç $50 = $5
      throw new Error(`Expected earnings >= $5, got $${referrerStats?.totalEarnings}`);
    }

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const isActive = isActivePartner(referrerId, this.tradingSystem);
    console.log(`  - Referrer is active: ${isActive}`);

    if (!isActive) {
      throw new Error('Referrer should be active');
    }

    console.log('‚úÖ Full referral cycle test passed\n');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function runReferralSystemTests(): Promise<void> {
  const tester = new ReferralSystemTester();
  await tester.runReferralTest();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default ReferralSystemTester; 