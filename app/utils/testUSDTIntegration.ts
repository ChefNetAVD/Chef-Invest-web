import { PaymentService } from '../services/payment/paymentService';
import { TradingSystem } from './tradingSystem';
import { TransactionTracker } from '../services/payment/transactionTracker';
import { BlockchainService } from '../services/blockchain/blockchainService';
import { NetworkType } from '../types/usdtPayment';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ USDT –ø–ª–∞—Ç–µ–∂–µ–π —Å TradingSystem
 */
export class USDTIntegrationTester {
  private tradingSystem: TradingSystem;
  private paymentService: PaymentService;
  private blockchainService: BlockchainService;
  private transactionTracker: TransactionTracker;

  constructor() {
    this.tradingSystem = new TradingSystem();
    this.paymentService = new PaymentService();
    this.blockchainService = new BlockchainService();
    this.paymentService.setTradingSystem(this.tradingSystem);
    this.transactionTracker = new TransactionTracker(this.paymentService, this.blockchainService);
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  async runIntegrationTest(): Promise<void> {
    console.log('üöÄ Starting USDT Integration Test...\n');

    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TradingSystem
      await this.testTradingSystemConnection();
      
      // –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.testUserInitialization();
      
      // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ USDT –ø–ª–∞—Ç–µ–∂–∞
      await this.testUSDTPaymentCreation();
      
      // –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      await this.testPaymentConfirmation();
      
      // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      await this.testBalanceDeposit();
      
      // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      await this.testErrorHandling();

      console.log('‚úÖ All integration tests passed successfully!');
      
    } catch (error) {
      console.error('‚ùå Integration test failed:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TradingSystem
   */
  private async testTradingSystemConnection(): Promise<void> {
    console.log('üîó Testing TradingSystem connection...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PaymentService –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ TradingSystem
    const payment = this.paymentService.createPaymentRequest('test-user', 50, 'TRC20');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    this.paymentService.updatePaymentStatus(payment.id, 'confirmed');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
    const result = await this.paymentService.processConfirmedPayment(payment.id);
    
    if (result) {
      throw new Error('Payment should not be processed without user initialization');
    }

    console.log('‚úÖ TradingSystem connection test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async testUserInitialization(): Promise<void> {
    console.log('üë§ Testing user initialization...');

    const testUserId = 'test-user-integration-123';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    this.tradingSystem.initializeUser(testUserId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
    const balance = this.tradingSystem.getUserBalance(testUserId);
    if (!balance) {
      throw new Error('User not initialized properly');
    }

    console.log(`  - User ${testUserId} initialized`);
    console.log(`  - Initial balance: $${balance.usdBalance}`);
    console.log(`  - Share balance: ${balance.shareBalance}`);
    
    console.log('‚úÖ User initialization test passed\n');
  }

  /**
   * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è USDT –ø–ª–∞—Ç–µ–∂–∞
   */
  private async testUSDTPaymentCreation(): Promise<void> {
    console.log('üí∞ Testing USDT payment creation...');

    const testUserId = 'test-user-integration-123';
    const testAmount = 100;
    const network: NetworkType = 'TRC20';

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const paymentRequest = this.paymentService.createPaymentRequest(
      testUserId,
      testAmount,
      network
    );

    console.log(`  - Payment ID: ${paymentRequest.id}`);
    console.log(`  - Amount: ${paymentRequest.amount} USDT`);
    console.log(`  - Network: ${paymentRequest.network}`);
    console.log(`  - Status: ${paymentRequest.status}`);
    console.log(`  - Wallet: ${paymentRequest.walletAddress}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    const retrievedPayment = this.paymentService.getPaymentRequest(paymentRequest.id);
    if (!retrievedPayment) {
      throw new Error('Payment not found after creation');
    }

    console.log('‚úÖ USDT payment creation test passed\n');
  }

  /**
   * –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
   */
  private async testPaymentConfirmation(): Promise<void> {
    console.log('‚úÖ Testing payment confirmation simulation...');

    const testUserId = 'test-user-integration-123';
    const payments = this.paymentService.getUserPaymentRequests(testUserId);
    
    if (payments.length === 0) {
      throw new Error('No payments found for testing');
    }

    const payment = payments[0];
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    this.paymentService.updatePaymentStatus(payment.id, 'confirmed', {
      transactionHash: 'test-tx-hash-123',
      confirmations: 15,
      simulatedAt: new Date()
    });

    console.log(`  - Payment ${payment.id} marked as confirmed`);
    console.log(`  - Transaction hash: test-tx-hash-123`);
    console.log(`  - Confirmations: 15`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    const updatedPayment = this.paymentService.getPaymentRequest(payment.id);
    if (updatedPayment?.status !== 'confirmed') {
      throw new Error('Payment status not updated to confirmed');
    }

    console.log('‚úÖ Payment confirmation test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
   */
  private async testBalanceDeposit(): Promise<void> {
    console.log('üí≥ Testing balance deposit...');

    const testUserId = 'test-user-integration-123';
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    const balanceBefore = this.tradingSystem.getUserBalance(testUserId);
    if (!balanceBefore) {
      throw new Error('User balance not found');
    }

    console.log(`  - Balance before: $${balanceBefore.usdBalance}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const processedCount = await this.paymentService.processAllConfirmedPayments();
    console.log(`  - Processed ${processedCount} confirmed payments`);

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    const balanceAfter = this.tradingSystem.getUserBalance(testUserId);
    if (!balanceAfter) {
      throw new Error('User balance not found after processing');
    }

    console.log(`  - Balance after: $${balanceAfter.usdBalance}`);
    console.log(`  - Balance increase: $${balanceAfter.usdBalance - balanceBefore.usdBalance}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è
    if (balanceAfter.usdBalance <= balanceBefore.usdBalance) {
      throw new Error('Balance did not increase after payment processing');
    }

    console.log('‚úÖ Balance deposit test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  private async testErrorHandling(): Promise<void> {
    console.log('‚ö†Ô∏è Testing error handling...');

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const payment = this.paymentService.createPaymentRequest('non-existent-user', 50, 'TRC20');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    this.paymentService.updatePaymentStatus(payment.id, 'confirmed');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
    const result = await this.paymentService.processConfirmedPayment(payment.id);
    
    if (result) {
      throw new Error('Payment should not be processed for non-existent user');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ 'failed'
    const failedPayment = this.paymentService.getPaymentRequest(payment.id);
    if (failedPayment?.status !== 'failed') {
      throw new Error('Payment status should be failed for non-existent user');
    }

    console.log('‚úÖ Error handling test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
   */
  async testFullCycle(): Promise<void> {
    console.log('üîÑ Testing full USDT payment cycle...\n');

    const testUserId = 'test-user-full-cycle-456';
    const testAmount = 50;
    const network: NetworkType = 'BEP20';

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.tradingSystem.initializeUser(testUserId);
    const initialBalance = this.tradingSystem.getUserBalance(testUserId);
    console.log(`Initial balance: $${initialBalance?.usdBalance}`);

    // 2. –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = this.paymentService.createPaymentRequest(testUserId, testAmount, network);
    console.log(`Created payment: ${payment.id}`);

    // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    this.paymentService.updatePaymentStatus(payment.id, 'confirmed', {
      transactionHash: 'full-cycle-tx-123',
      confirmations: 20
    });

    // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const success = await this.paymentService.processConfirmedPayment(payment.id);
    console.log(`Payment processed: ${success}`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const finalBalance = this.tradingSystem.getUserBalance(testUserId);
    const transactions = this.tradingSystem.getUserTransactions(testUserId);
    
    console.log(`Final balance: $${finalBalance?.usdBalance}`);
    console.log(`Total transactions: ${transactions.length}`);
    console.log(`Balance increase: $${(finalBalance?.usdBalance || 0) - (initialBalance?.usdBalance || 0)}`);

    if ((finalBalance?.usdBalance || 0) !== (initialBalance?.usdBalance || 0) + testAmount) {
      throw new Error('Full cycle test failed - incorrect balance');
    }

    console.log('‚úÖ Full cycle test passed!\n');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */
export async function runUSDTIntegrationTests(): Promise<void> {
  const tester = new USDTIntegrationTester();
  await tester.runIntegrationTest();
  await tester.testFullCycle();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default USDTIntegrationTester; 