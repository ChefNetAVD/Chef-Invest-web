import { PaymentService } from '../services/payment/paymentService';
import { BlockchainService } from '../services/blockchain/blockchainService';
import { TransactionTracker } from '../services/payment/transactionTracker';
import { NetworkType } from '../types/usdtPayment';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ USDT –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export class USDTSystemTester {
  private paymentService: PaymentService;
  private blockchainService: BlockchainService;
  private transactionTracker: TransactionTracker;

  constructor() {
    this.blockchainService = new BlockchainService();
    this.paymentService = new PaymentService();
    this.transactionTracker = new TransactionTracker(this.paymentService, this.blockchainService);
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
   */
  async runFullTest(): Promise<void> {
    console.log('üöÄ Starting USDT Payment System Test...\n');

    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await this.testConfiguration();
      
      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
      await this.testAPIConnections();
      
      // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await this.testPaymentRequests();
      
      // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await this.testTransactionValidation();
      
      // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await this.testTransactionTracking();

      console.log('‚úÖ All tests passed successfully!');
      
    } catch (error) {
      console.error('‚ùå Test failed:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  private async testConfiguration(): Promise<void> {
    console.log('üìã Testing configuration...');

    const networks = this.blockchainService.getSupportedNetworks();
    console.log(`Supported networks: ${networks.join(', ')}`);

    for (const network of networks) {
      const config = this.blockchainService.getNetworkConfig(network);
      console.log(`${network}:`);
      console.log(`  - Name: ${config.name}`);
      console.log(`  - Wallet: ${config.walletAddress}`);
      console.log(`  - Min confirmations: ${config.minConfirmations}`);
      console.log(`  - Decimals: ${config.decimals}`);
    }

    console.log('‚úÖ Configuration test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ API
   */
  private async testAPIConnections(): Promise<void> {
    console.log('üîå Testing API connections...');

    const networks = this.blockchainService.getSupportedNetworks();

    for (const network of networks) {
      try {
        console.log(`Testing ${network} API...`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞
        const blockNumber = await this.blockchainService.getCurrentBlockNumber(network);
        console.log(`  - Current block: ${blockNumber}`);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        const walletAddress = this.blockchainService.getWalletAddress(network);
        const balance = await this.blockchainService.getUSDTBalance(walletAddress, network);
        console.log(`  - USDT balance: ${balance}`);

        console.log(`  ‚úÖ ${network} API connection successful`);
      } catch (error) {
        console.error(`  ‚ùå ${network} API connection failed:`, error);
        throw error;
      }
    }

    console.log('‚úÖ API connections test passed\n');
  }

  /**
   * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async testPaymentRequests(): Promise<void> {
    console.log('üí∞ Testing payment requests...');

    const testUserId = 'test-user-123';
    const testAmount = 50;
    const networks: NetworkType[] = ['TRC20', 'BEP20', 'ERC20'];

    for (const network of networks) {
      try {
        console.log(`Creating payment request for ${network}...`);
        
        const paymentRequest = this.paymentService.createPaymentRequest(
          testUserId,
          testAmount,
          network
        );

        console.log(`  - Payment ID: ${paymentRequest.id}`);
        console.log(`  - Amount: ${paymentRequest.amount} USDT`);
        console.log(`  - Network: ${paymentRequest.network}`);
        console.log(`  - Wallet: ${paymentRequest.walletAddress}`);
        console.log(`  - Status: ${paymentRequest.status}`);
        console.log(`  - Expires: ${paymentRequest.expiresAt.toISOString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        const retrievedPayment = this.paymentService.getPaymentRequest(paymentRequest.id);
        if (!retrievedPayment) {
          throw new Error('Payment not found after creation');
        }

        console.log(`  ‚úÖ ${network} payment request created successfully`);
      } catch (error) {
        console.error(`  ‚ùå ${network} payment request failed:`, error);
        throw error;
      }
    }

    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPayments = this.paymentService.getUserPaymentRequests(testUserId);
    console.log(`  - User has ${userPayments.length} payment requests`);

    console.log('‚úÖ Payment requests test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  private async testTransactionValidation(): Promise<void> {
    console.log('üîç Testing transaction validation...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const testUserId = 'test-validation-123';
    const testAmount = 25;
    const network: NetworkType = 'TRC20';

    const paymentRequest = this.paymentService.createPaymentRequest(
      testUserId,
      testAmount,
      network
    );

    console.log(`Created test payment: ${paymentRequest.id}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    try {
      const validation = await this.blockchainService.validatePayment(
        'fake-transaction-hash',
        testAmount,
        paymentRequest.walletAddress,
        network
      );

      console.log(`Validation result for fake transaction: ${validation.isValid}`);
      if (!validation.isValid) {
        console.log(`  - Error: ${validation.error}`);
      }
    } catch (error) {
      console.log(`  - Expected error for fake transaction: ${error}`);
    }

    console.log('‚úÖ Transaction validation test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  private async testTransactionTracking(): Promise<void> {
    console.log('üì° Testing transaction tracking...');

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
    this.transactionTracker.start();

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫–µ—Ä–∞
    const status = this.transactionTracker.getStatus();
    console.log(`Tracker status: ${status.isRunning ? 'Running' : 'Stopped'}`);
    console.log('Last checked blocks:', status.lastCheckedBlocks);

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await new Promise(resolve => setTimeout(resolve, 5000));

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
    this.transactionTracker.stop();

    console.log('‚úÖ Transaction tracking test passed\n');
  }

  /**
   * –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private async testStatistics(): Promise<void> {
    console.log('üìä Testing statistics...');

    const stats = this.paymentService.getPaymentStats();
    console.log('Payment statistics:');
    console.log(`  - Total payments: ${stats.totalPayments}`);
    console.log(`  - Total amount: ${stats.totalAmount} USDT`);
    console.log(`  - Success rate: ${stats.successRate.toFixed(2)}%`);
    console.log(`  - Average amount: ${stats.averageAmount.toFixed(2)} USDT`);

    console.log('By network:');
    for (const [network, networkStats] of Object.entries(stats.byNetwork)) {
      console.log(`  ${network}:`);
      console.log(`    - Count: ${networkStats.count}`);
      console.log(`    - Amount: ${networkStats.amount} USDT`);
      console.log(`    - Success rate: ${networkStats.successRate.toFixed(2)}%`);
    }

    console.log('‚úÖ Statistics test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  private async testErrorHandling(): Promise<void> {
    console.log('‚ö†Ô∏è Testing error handling...');

    // –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å–µ—Ç—å—é
    try {
      this.paymentService.createPaymentRequest('test-user', 100, 'INVALID' as NetworkType);
      throw new Error('Should have thrown an error for invalid network');
    } catch (error) {
      console.log(`  ‚úÖ Correctly handled invalid network: ${error}`);
    }

    // –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º–æ–π
    try {
      this.paymentService.createPaymentRequest('test-user', -10, 'TRC20');
      throw new Error('Should have thrown an error for negative amount');
    } catch (error) {
      console.log(`  ‚úÖ Correctly handled negative amount: ${error}`);
    }

    console.log('‚úÖ Error handling test passed\n');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
export async function runUSDTSystemTests(): Promise<void> {
  const tester = new USDTSystemTester();
  await tester.runFullTest();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default USDTSystemTester; 