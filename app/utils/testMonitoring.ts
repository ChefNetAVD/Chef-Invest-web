import { PaymentService } from '../services/payment/paymentService';
import { TradingSystem } from './tradingSystem';
import { TransactionTracker } from '../services/payment/transactionTracker';
import { BlockchainService } from '../services/blockchain/blockchainService';
import { NetworkType } from '../types/usdtPayment';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
 */
export class MonitoringTester {
  private tradingSystem: TradingSystem;
  private paymentService: PaymentService;
  private blockchainService: BlockchainService;
  private transactionTracker: TransactionTracker;

  constructor() {
    this.tradingSystem = new TradingSystem();
    this.paymentService = new PaymentService();
    this.blockchainService = new BlockchainService();
    this.paymentService.setTradingSystem(this.tradingSystem);
    this.transactionTracker = new TransactionTracker(this.paymentService, this.blockchainService);
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async runMonitoringTest(): Promise<void> {
    console.log('üîç Starting Monitoring Test...\n');

    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
      await this.testPaymentCreation();
      
      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–µ–π
      await this.testPendingPaymentsRetrieval();
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ —Å–µ—Ç—è–º
      await this.testNetworkMonitoring();
      
      // –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      await this.testFullMonitoringCycle();

      console.log('‚úÖ All monitoring tests passed successfully!');
      
    } catch (error) {
      console.error('‚ùå Monitoring test failed:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
   */
  private async testPaymentCreation(): Promise<void> {
    console.log('üí∞ Testing payment creation...');

    const testUserId = 'test-monitoring-user-123';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.tradingSystem.initializeUser(testUserId);

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π
    const payments = [
      this.paymentService.createPaymentRequest(testUserId, 50, 'TRC20'),
      this.paymentService.createPaymentRequest(testUserId, 75, 'BEP20'),
      this.paymentService.createPaymentRequest(testUserId, 100, 'ERC20')
    ];

    console.log(`  - Created ${payments.length} payments`);
    
    for (const payment of payments) {
      console.log(`    ${payment.network}: ${payment.amount} USDT (${payment.id})`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    const userPayments = this.paymentService.getUserPaymentRequests(testUserId);
    if (userPayments.length !== payments.length) {
      throw new Error(`Expected ${payments.length} payments, got ${userPayments.length}`);
    }

    console.log('‚úÖ Payment creation test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–µ–π
   */
  private async testPendingPaymentsRetrieval(): Promise<void> {
    console.log('üìã Testing pending payments retrieval...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –ø–ª–∞—Ç–µ–∂–∏ –ø–æ —Å–µ—Ç—è–º
    const trc20Pending = this.paymentService.getPendingPaymentsForNetwork('TRC20');
    const bep20Pending = this.paymentService.getPendingPaymentsForNetwork('BEP20');
    const erc20Pending = this.paymentService.getPendingPaymentsForNetwork('ERC20');
    const allPending = this.paymentService.getAllPendingPayments();

    console.log(`  - TRC20 pending: ${trc20Pending.length}`);
    console.log(`  - BEP20 pending: ${bep20Pending.length}`);
    console.log(`  - ERC20 pending: ${erc20Pending.length}`);
    console.log(`  - Total pending: ${allPending.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞–π–¥–µ–Ω—ã
    if (allPending.length !== 3) {
      throw new Error(`Expected 3 pending payments, got ${allPending.length}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–µ—Ç—å –∏–º–µ–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É pending –ø–ª–∞—Ç–µ–∂—É
    if (trc20Pending.length !== 1 || bep20Pending.length !== 1 || erc20Pending.length !== 1) {
      throw new Error('Each network should have exactly 1 pending payment');
    }

    console.log('‚úÖ Pending payments retrieval test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ —Å–µ—Ç—è–º
   */
  private async testNetworkMonitoring(): Promise<void> {
    console.log('üåê Testing network monitoring...');

    const networks: NetworkType[] = ['TRC20', 'BEP20', 'ERC20'];

    for (const network of networks) {
      console.log(`  Testing ${network} monitoring...`);
      
      // –ü–æ–ª—É—á–∞–µ–º pending –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —Å–µ—Ç–∏
      const pendingPayments = this.paymentService.getPendingPaymentsForNetwork(network);
      
      if (pendingPayments.length === 0) {
        throw new Error(`No pending payments found for ${network}`);
      }

      const payment = pendingPayments[0];
      console.log(`    - Found pending payment: ${payment.id}`);
      console.log(`    - Amount: ${payment.amount} USDT`);
      console.log(`    - Wallet: ${payment.walletAddress}`);
      console.log(`    - Status: ${payment.status}`);
      console.log(`    - Expires: ${payment.expiresAt.toISOString()}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∏—Å—Ç–µ–∫
      if (payment.expiresAt <= new Date()) {
        throw new Error(`Payment ${payment.id} has expired`);
      }
    }

    console.log('‚úÖ Network monitoring test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private async testFullMonitoringCycle(): Promise<void> {
    console.log('üîÑ Testing full monitoring cycle...');

    const testUserId = 'test-full-cycle-456';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.tradingSystem.initializeUser(testUserId);
    const initialBalance = this.tradingSystem.getUserBalance(testUserId);

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = this.paymentService.createPaymentRequest(testUserId, 25, 'TRC20');
    console.log(`  - Created payment: ${payment.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –≤ pending
    const pendingPayments = this.paymentService.getPendingPaymentsForNetwork('TRC20');
    if (pendingPayments.length === 0) {
      throw new Error('Payment not found in pending payments');
    }

    console.log(`  - Payment found in pending: ${pendingPayments[0].id}`);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    this.paymentService.updatePaymentStatus(payment.id, 'confirmed', {
      transactionHash: 'test-monitoring-tx-123',
      confirmations: 15
    });

    console.log(`  - Payment status updated to confirmed`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    const success = await this.paymentService.processConfirmedPayment(payment.id);
    if (!success) {
      throw new Error('Failed to process confirmed payment');
    }

    console.log(`  - Payment processed successfully`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è
    const finalBalance = this.tradingSystem.getUserBalance(testUserId);
    const balanceIncrease = (finalBalance?.usdBalance || 0) - (initialBalance?.usdBalance || 0);

    console.log(`  - Balance increase: $${balanceIncrease}`);
    console.log(`  - Expected: $25`);

    if (balanceIncrease !== 25) {
      throw new Error(`Expected balance increase of $25, got $${balanceIncrease}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω
    const completedPayment = this.paymentService.getPaymentRequest(payment.id);
    if (completedPayment?.status !== 'completed') {
      throw new Error(`Payment status should be completed, got ${completedPayment?.status}`);
    }

    console.log('‚úÖ Full monitoring cycle test passed\n');
  }

  /**
   * –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async testMonitoringStatus(): Promise<void> {
    console.log('üìä Testing monitoring status...');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫–µ—Ä–∞
    const status = this.transactionTracker.getStatus();
    
    console.log(`  - Is running: ${status.isRunning}`);
    console.log(`  - Last checked blocks:`, status.lastCheckedBlocks);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
    this.transactionTracker.start();
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const updatedStatus = this.transactionTracker.getStatus();
    console.log(`  - After start - Is running: ${updatedStatus.isRunning}`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
    this.transactionTracker.stop();
    
    const finalStatus = this.transactionTracker.getStatus();
    console.log(`  - After stop - Is running: ${finalStatus.isRunning}`);

    console.log('‚úÖ Monitoring status test passed\n');
  }

  /**
   * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async testMonitoringErrorHandling(): Promise<void> {
    console.log('‚ö†Ô∏è Testing monitoring error handling...');

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const payment = this.paymentService.createPaymentRequest('non-existent-user', 10, 'TRC20');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    this.paymentService.updatePaymentStatus(payment.id, 'confirmed');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
    const success = await this.paymentService.processConfirmedPayment(payment.id);
    
    if (success) {
      throw new Error('Payment should not be processed for non-existent user');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ 'failed'
    const failedPayment = this.paymentService.getPaymentRequest(payment.id);
    if (failedPayment?.status !== 'failed') {
      throw new Error('Payment status should be failed for non-existent user');
    }

    console.log('‚úÖ Monitoring error handling test passed\n');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export async function runMonitoringTests(): Promise<void> {
  const tester = new MonitoringTester();
  await tester.runMonitoringTest();
  await tester.testMonitoringStatus();
  await tester.testMonitoringErrorHandling();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default MonitoringTester; 